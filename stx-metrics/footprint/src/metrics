#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = "Victor Rodriguez"

import statistics
import subprocess
import argparse
import os.path
import json
import time
import random
import re

from insertdb import send_data
from insertdb import check_data
from insertdb import get_server_data

send_data_flag = False
db_client = None
SLEEP_TIME = 1


def get_time(space):
    proc = subprocess.Popen(['systemd-analyze','time'],stdout=subprocess.PIPE)
    while True:
        line = proc.stdout.readline()
        if space in line:
            line_array = (line.rstrip().split())
            count = 0
            for element in line_array:
                if space in element:
                    break
                count = count + 1
            return line_array[count - 1]
            break
        else:
            break


def get_hd_footprint():
    proc = subprocess.Popen(['df','-h'],stdout=subprocess.PIPE)
    while True:
        line = proc.stdout.readline()
        if line != '':
            if "/" in line:
                line_array = (line.rstrip().split())
                for element in line_array:
                    if "/" == line_array[len(line_array)-1]:
                        sda = (line)
                        break
        else:
            break
    if sda:
        total_hd = (sda.split()[1])
        used_hd = (sda.split()[2])
        avail_hd = (sda.split()[3])
        per_hd = (sda.split()[4])
        return total_hd,used_hd,avail_hd,per_hd


def memory_footprint(memory_kind):
    proc = subprocess.Popen(['free','-h'],stdout=subprocess.PIPE)
    while True:
        line = proc.stdout.readline()
        if line != '':
            if memory_kind in line:
                line_array = (line.rstrip().split())
                mem_total = line_array[1]
                mem_used = line_array[2]
                break
        else:
            break
    return mem_total,mem_used


def get_cpu_utilization(seconds):
    delay = 5
    loop = 0
    loops = seconds / delay
    last_idle = last_total = 0
    total_util = 0.0
    list_data = []

    while True:
        with open('/proc/stat') as f:
            fields = [float(column) for column in \
                    f.readline().strip().split()[1:]]
        idle, total = fields[3], sum(fields)
        idle_delta, total_delta = idle - last_idle, total - last_total
        last_idle, last_total = idle, total
        utilisation = 100.0 * (1.0 - idle_delta / total_delta)
        print('%5.1f%%' % utilisation)
        total_util += utilisation
        list_data.append(utilisation)
        time.sleep(delay)
        loop = loop + 1
        if loop >= loops:
            break
    if loops:
        average = (total_util/loops)
    stdev_result = (statistics.stdev(list_data))

    return average,stdev_result


def write_json_data(table,test_name,value):
    time.sleep(SLEEP_TIME)
    current_date = time.strftime("%c")
    str_value = str(value)
    unit = str_value[len(str_value)-1]
    value = re.sub('[^\d\.]', '', value)
    json_data = [
        {
            "measurement":table,
            "time":current_date,
            "fields":{
                "test":test_name,
                "unit":unit,
                "value":value
            }
        }
    ]
    return json_data


def print_hd_footprint():
    total_hd,used_hd,avail_hd,per_hd = get_hd_footprint()
    print("\n===================================")
    print("Hard Drive Footprint")
    print("===================================\n")
    print("total_hd = " + total_hd)
    print("used_hd = " + used_hd)
    print("avail_hd = " + avail_hd)
    print("per_hd = " + per_hd)
    if send_data_flag and db_client:
        json_data = write_json_data("hd_footprint","total_hd",total_hd)
        send_data(json_data,db_client)

        json_data = write_json_data("hd_footprint","used_hd",used_hd)
        client = send_data(json_data,db_client)

        json_data = write_json_data("hd_footprint","avail_hd",avail_hd)
        client = send_data(json_data,db_client)

        json_data = write_json_data("hd_footprint","per_hd",per_hd)
        client = send_data(json_data,db_client)


def print_boottime():

    kernel_time = get_time("kernel")
    userspace_time = get_time("userspace")

    print("\n===================================")
    print("System Boottime")
    print("===================================\n")
    print ("kernel space boot time = " + kernel_time)
    print ("user space boot time = " + userspace_time)

    if send_data_flag and db_client:
        json_data = write_json_data("boottime",\
                "kernel_time",kernel_time)
        send_data(json_data,db_client)

        json_data = write_json_data("boottime",\
                "userspace_time",userspace_time)
        client = send_data(json_data,db_client)


def print_memory_footprint():

    mem_total,mem_used = memory_footprint("Mem")
    print("\n===================================")
    print(" Virtual Memory Footprint")
    print("===================================\n")
    print ("\nMemory\n")
    print ("    total = " + mem_total)
    print ("    used = " + mem_used)

    if send_data_flag and db_client:
        json_data = write_json_data("memory_footprint",\
                "virtual_mem_total",mem_total)
        send_data(json_data,db_client)

        json_data = write_json_data("memory_footprint",\
                "virtual_mem_used",mem_used)
        send_data(json_data,db_client)

    mem_total,mem_used = memory_footprint("Swap")
    print ("\nSwap memory\n")
    print ("    total = " + mem_total)
    print ("    used = " + mem_used)

    if send_data_flag and db_client:
        json_data = write_json_data("memory_footprint",\
                "swap_mem_total",mem_total)
        send_data(json_data,db_client)

        json_data = write_json_data("memory_footprint",\
                "swap_mem_used",mem_used)
        send_data(json_data,db_client)


def print_cpu_utilization(time):
    print("\n===================================")
    print(" CPU utilization")
    print("===================================\n")
    average,stdev_result = get_cpu_utilization(int(time))
    average = float("{0:.2f}".format(average))
    stdev_result = float("{0:.2f}".format(stdev_result))
    print ("Average CPU utilization = " + str(average) + " %")
    print ("Standard Deviation = " + str(stdev_result) + " %")

    if send_data_flag and db_client:
        json_data = write_json_data("cpu_footprint",\
                "utilization_average",str(average) + "%")
        send_data(json_data,db_client)

        json_data = write_json_data("cpu_footprint",\
                "utilization_average",str(stdev_result) + "%")
        send_data(json_data,db_client)


def print_host_data():
    print("\n===================================")
    print(" HOST INFO")
    print("===================================\n")
    filename = '/etc/lsb-release'
    if os.path.isfile(filename):
        FILE = open(filename,"r")
        print (FILE.read())


def generate_json(data):
    with open('data.json', 'w') as outfile:
        json.dump(data, outfile)


def main():

    global current_date
    global send_data_flag
    global db_client

    parser = argparse.ArgumentParser()
    parser.add_argument('--boottime',\
        help='Print kernel/userspace boot time',\
        action='store_true')
    parser.add_argument('--hd_footprint',\
        help='Print HD footprint',\
        action='store_true')
    parser.add_argument('--memory_footprint',\
        help='Print virtual memory footprint',\
        action='store_true')
    parser.add_argument('--cpu_utilization',\
        help='Print cpu utilization over X seconds')

    parser.add_argument('--send_data',\
        action='store_true',\
        help='Store data at Influx DB')

    args = parser.parse_args()

    print_host_data()
    total_time = 120

    if args.send_data:
        db_client = get_server_data()
        send_data_flag = True

    if args.boottime:
        print_boottime()

    elif args.hd_footprint:
        print_hd_footprint()

    elif args.memory_footprint:
        print_memory_footprint()

    elif args.cpu_utilization:
        if args.cpu_utilization <= 0:
            total_time = 120
        else:
            total_time = args.cpu_utilization
        print_cpu_utilization(total_time)

    else:

        print_boottime()
        print_hd_footprint()
        print_memory_footprint()
        print_cpu_utilization(total_time)


if __name__ == "__main__":
    main()
