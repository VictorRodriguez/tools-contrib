#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Mar 27 10:28:06 2019
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ssh -o StrictHostKeyChecking=no -i ./keys/temp wrsroot@${VM_HOST} sudo -S ./setup_sudo.sh
match_max 100000
expect -exact "Release 19.01\r
------------------------------------------------------------------------\r
W A R N I N G *** W A R N I N G *** W A R N I N G *** W A R N I N G *** \r
------------------------------------------------------------------------\r
THIS IS A PRIVATE COMPUTER SYSTEM.\r
This computer system including all related equipment, network devices\r
(specifically including Internet access), are provided only for authorized use.\r
All computer systems may be monitored for all lawful purposes, including to\r
ensure that their use is authorized, for management of the system, to\r
facilitate protection against unauthorized access, and to verify security\r
procedures, survivability and operational security. Monitoring includes active\r
attacks by authorized personnel and their entities to test or verify the\r
security of the system. During monitoring, information may be examined,\r
recorded, copied and used for authorized purposes. All information including\r
personal information, placed on or sent over this system may be monitored. Uses\r
of this system, authorized or unauthorized, constitutes consent to monitoring\r
of this system. Unauthorized use may subject you to criminal prosecution.\r
Evidence of any such unauthorized use collected during monitoring may be used\r
for administrative, criminal or other adverse action. Use of this system\r
constitutes consent to monitoring for these purposes.\r
\r
Password: "
send -- "Madawa\$ka1\r"
expect eof
